#!/bin/bash

# Needed in order to make read work in hook
exec < /dev/tty
run_linters() {
    # the logs will contain output from previous run only
    mkdir -p logs
    echo > logs/linter.log
    fail=false
    
    # Installing linters in case they are not installed
    linters=(flake8 ruff black pycodestyle pydocstyle mypy django-stubs) # Add pylint later
    for linter in ${linters[@]}; do 
        # Handling black separately because it throws error in git bash on windows.
        if [[ $linter == "black" ]]; then
            pip show $linter > /dev/null 2>&1
            exit_code=$?
            if [[ $exit_code -ne 0 ]];  then
                echo "WARNING: package not found: black"
            fi
        else
            pip show $linter > /dev/null
            exit_code=$?
        fi

        if [ $exit_code -ne 0 ]; then
            read -p "Install $linter?[y/n] " answer 
            if [[ $answer =~ ^[Yy] ]]; then
                python -m pip install $linter || exit 1
            else
                echo "Requirements not met, commit aborted."
                exit 1
            fi
        fi
    done

    npm ls stylelint > /dev/null
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo "stylelint not found!!"
        read -p "Install linter?[y/n] " answer 
        if [[ $answer =~ ^[Yy] ]]; then
            npm install stylelint stylelint-config-standard -D
        else
            echo "Requirements not met, commit aborted."
            exit 1
        fi
    fi

    npm ls htmlhint > /dev/null
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo "htmlhint not found!!"
        read -p "Install linter?[y/n] " answer 
        if [[ $answer =~ ^[Yy] ]]; then
            npm install htmlhint -D
        else
            echo "Requirements not met, commit aborted."
            exit 1
        fi
    fi

    # Reference for the following command https://git-scm.com/docs/git-diff 
    # Get the list of staged files
    staged_files=$(git diff --cached --name-only --diff-filter=AMR)

    # linters can be installed by command: pip install <linter_name>
    echo "Running linters..."
    for file in $staged_files; do
        if [[ $file != */migrations/* && $file != *test* && $file != *settings* && $file != *init* && $file != *docs/* ]]; then

            echo -e "File Path: $file\n" >> logs/linter.log

            if [[ $file = *.py ]]; then

                echo -e "FLAKE8:" >> logs/linter.log
                python -m flake8 $file >> logs/linter.log

                echo -e "PYCODESTYLE:" >> logs/linter.log
                python -m pycodestyle $file >> logs/linter.log

                # echo -e "PYLINT:" >> logs/linter.log
                # python -m pylint $file >> logs/linter.log

                echo -e "BLACK:" >> logs/linter.log
                python -m black --diff $file >> logs/linter.log 2>&1

                echo -e "RUFF:" >> logs/linter.log
                python -m ruff check $file >> logs/linter.log

                echo -e "MYPY:" >> logs/linter.log
                python -m mypy $file >> logs/linter.log

                echo -e "PYDOCSTYLE" >> logs/linter.log
                python -m pydocstyle $file >> logs/linter.log 
                
            elif [[ $file = *.html ]]; then
                echo -e "HTMLHINT:" >> logs/linter.log
                npx htmlhint $file >> logs/linter.log

            elif [[ $file = *.css ]]; then
                echo -e "STYLELINT:" >> logs/linter.log
                npx stylelint $file --config .stylelintrc.json
            fi
            
            echo -e "" >> logs/linter.log
            
            exit_code=$?
            if [ $exit_code -ne 0 ]; then
                fail=true
            fi
        fi
    done
    
    cat logs/linter.log 

    if [[ $fail != false ]]; then
        echo "Linters failed, Commit aborted."
        echo "Please check terminal or logs in logs/linters.log"
        exit 1
    fi
}

ins_empty_line(){
    # Get the list of staged files
    staged_files=$(git diff --cached --name-only --diff-filter=AMR)

    for file in $staged_files; do
        last_char=$(tail -c 1 $file)
        if [[ "$last_char" != "" ]]; then
            echo >> "$file"
            git add "$file"
        fi
    done
}

ins_empty_line
run_linters
